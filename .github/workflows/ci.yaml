name: Release CI

env:
  project-name: mmw
  fd-aws-tf-modules-version: v2.23.0

on:
  push:
    branches: ["main", "pv/reusable"]
    tags: ["v*.*.*"]

jobs:
  deploy-staging-2:
    with:
      stage: staging
      project-name: ${{ env.project-name }}
      fd-aws-tf-modules-version: ${{ env.fd-aws-tf-modules-version }}
    uses: .github/workflows/reusable.yml
    secrets: inherit

  deploy-staging:
    environment:
      name: staging
      url: https://console.staging.modelmywatershed.org
    env:
      stage: staging
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"

      - name: Preparing Environment
        id: prep_env
        run: |
          echo "Creating terraform backend file ..."
          echo '' > config.s3.backend.tf
          echo 'terraform {' >> config.s3.backend.tf
          echo '  backend "s3" {' >> config.s3.backend.tf
          echo '    encrypt = true' >> config.s3.backend.tf
          echo "    bucket = \"${{ secrets.TF_STATE_BUCKET }}\"" >> config.s3.backend.tf
          echo "    dynamodb_table = \"${{ secrets.TF_STATE_LOCK_TABLE }}\"" >> config.s3.backend.tf
          echo "    key = \"${{ env.project-name }}-${{ env.stage }}.tfstate\"" >> config.s3.backend.tf
          echo "    region = \"${{ secrets.AWS_REGION }}\"" >> config.s3.backend.tf
          echo '  }' >> config.s3.backend.tf
          echo '}' >> config.s3.backend.tf
          cat config.s3.backend.tf
          echo "Using FilmDrop Terraform ${{ env.fd-aws-tf-modules-version }} release..."
          ./scripts/retrieve_tf_modules.sh ${{ env.fd-aws-tf-modules-version }}

      - name: Configure Terraform Init Credentials
        id: init_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubReleaseInit

      - name: Terraform Init
        id: tf_init
        run: terraform init

      - name: Terraform Validate
        id: tf_validate
        run: terraform validate

      - name: Configure Terraform Plan Credentials
        id: plan_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubReleasePlan

      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -var-file="${{ env.stage }}.tfvars" -out ${{ env.stage }}.tfplan -lock=false

      - name: Configure Terraform Apply Credentials
        id: apply_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubReleaseApply

      - name: Terraform Apply
        id: tf_apply
        run: terraform apply -lock=false -input=false ${{ env.stage }}.tfplan

      - name: Post status to Slack channel
        id: tf_apply_successs
        if: steps.tf_apply.outcome == 'success'
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: ":badger_dance: ${{ env.project-name }}-${{ env.stage }}-titiler ${{  github.ref_name }} terraform apply job has succeeded!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Post status to Slack channel
        id: tf_apply_failure
        if: steps.tf_apply.outcome != 'success'
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: ":sadpanda: ${{ env.project-name }}-${{ env.stage }}-titiler ${{  github.ref_name }} terraform apply has failed!\n:alert: make sure cleanup job deletes all AWS resources!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-prod:
    environment:
      name: prod
      url: https://console.modelmywatershed.org
    env:
      stage: prod
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"

      - name: Preparing Environment
        id: prep_env
        run: |
          echo "Creating terraform backend file ..."
          echo '' > config.s3.backend.tf
          echo 'terraform {' >> config.s3.backend.tf
          echo '  backend "s3" {' >> config.s3.backend.tf
          echo '    encrypt = true' >> config.s3.backend.tf
          echo "    bucket = \"${{ secrets.TF_STATE_BUCKET }}\"" >> config.s3.backend.tf
          echo "    dynamodb_table = \"${{ secrets.TF_STATE_LOCK_TABLE }}\"" >> config.s3.backend.tf
          echo "    key = \"${{ env.project-name }}-${{ env.stage }}.tfstate\"" >> config.s3.backend.tf
          echo "    region = \"${{ secrets.AWS_REGION }}\"" >> config.s3.backend.tf
          echo '  }' >> config.s3.backend.tf
          echo '}' >> config.s3.backend.tf
          cat config.s3.backend.tf
          echo "Using FilmDrop Terraform ${{ env.fd-aws-tf-modules-version }} release..."
          ./scripts/retrieve_tf_modules.sh ${{ env.fd-aws-tf-modules-version }}

      - name: Configure Terraform Init Credentials
        id: init_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubReleaseInit

      - name: Terraform Init
        id: tf_init
        run: terraform init

      - name: Terraform Validate
        id: tf_validate
        run: terraform validate

      - name: Configure Terraform Plan Credentials
        id: plan_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubReleasePlan

      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -var-file="${{ env.stage }}.tfvars" -out ${{ env.stage }}.tfplan -lock=false

      - name: Configure Terraform Apply Credentials
        id: apply_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubReleaseApply

      - name: Terraform Apply
        id: tf_apply
        run: terraform apply -lock=false -input=false ${{ env.stage }}.tfplan

      - name: Post status to Slack channel
        id: tf_apply_successs
        if: steps.tf_apply.outcome == 'success'
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: ":badger_dance: ${{ env.project-name }}-${{ env.stage }}-titiler ${{  github.ref_name }} terraform apply job has succeeded!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Post status to Slack channel
        id: tf_apply_failure
        if: steps.tf_apply.outcome != 'success'
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: ":sadpanda: ${{ env.project-name }}-${{ env.stage }}-titiler ${{  github.ref_name }} terraform apply has failed!\n:alert: make sure cleanup job deletes all AWS resources!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
